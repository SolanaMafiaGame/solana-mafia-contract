use anchor_lang::prelude::*;
use anchor_lang::system_program;

use crate::error::SolanaMafiaError;
use crate::constants::*;

/// üÜï Claim earnings with new individual business tracking system
pub fn claim_earnings(ctx: Context<crate::ClaimEarnings>) -> Result<()> {
    let player = &mut ctx.accounts.player;
    let game_state = &mut ctx.accounts.game_state;
    let clock = Clock::get()?;
    let current_time = clock.unix_timestamp;
    
    // üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–≤—Ç–æ–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
    if !player.auto_claim_purchased {
        require!(
            player.can_claim_without_auto(current_time),
            SolanaMafiaError::ClaimTooEarly
        );
    }
    
    // üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º earnings: –±–µ–∑ auto-claim = –ø–æ–ª–Ω–∞—è —Å—É—Ç–æ—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, —Å auto-claim = —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    let claimable_amount = player.get_claimable_amount(current_time)?;
    
    if claimable_amount == 0 {
        return Err(SolanaMafiaError::NoEarningsToClaim.into());
    }
    
    // Calculate claim fee (2% –æ—Ç —Å—É–º–º—ã claim)
    let claim_fee = (claimable_amount as u128 * CLAIM_EARNINGS_FEE_PERCENT as u128 / 100) as u64;
    let net_amount = claimable_amount.saturating_sub(claim_fee);
    
    // Check treasury has enough funds
    let treasury_balance = ctx.accounts.treasury_pda.to_account_info().lamports();
    if treasury_balance < claimable_amount {
        return Err(ProgramError::InsufficientFunds.into());
    }
    
    // Transfer earnings from treasury PDA to player using manual lamports manipulation
    if net_amount > 0 {
        **ctx.accounts.treasury_pda.to_account_info().try_borrow_mut_lamports()? -= net_amount;
        **ctx.accounts.player_owner.to_account_info().try_borrow_mut_lamports()? += net_amount;
        msg!("üí∞ Transferred {} lamports earnings to player", net_amount);
    }
    
    // Transfer claim fee from treasury PDA to admins using manual lamports manipulation
    if claim_fee > 0 {
        **ctx.accounts.treasury_pda.to_account_info().try_borrow_mut_lamports()? -= claim_fee;
        **ctx.accounts.treasury_wallet.to_account_info().try_borrow_mut_lamports()? += claim_fee;
        msg!("üí≥ Claim fee {} lamports sent to admins", claim_fee);
    }
    
    // üÜï –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–∞ claim –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤
    player.process_claim(claimable_amount, current_time)?;
    
    // Update game statistics
    game_state.add_withdrawal(claimable_amount);

    emit!(crate::EarningsClaimed {
        player: ctx.accounts.player_owner.key(),
        amount: claimable_amount,
        claimed_at: current_time,
    });
    
    msg!("üí∞ Claimed {} lamports (net: {}, fee: {} [{}%]) [auto_claim: {}]", 
         claimable_amount, net_amount, claim_fee, CLAIM_EARNINGS_FEE_PERCENT, player.auto_claim_purchased);
    Ok(())
}

/// üÜï –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–∞ 0.05 SOL (—Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ –≤—Å—é –∏–≥—Ä—É)
pub fn purchase_auto_claim(ctx: Context<crate::PurchaseAutoClaim>) -> Result<()> {
    let player = &mut ctx.accounts.player;
    let game_state = &mut ctx.accounts.game_state;
    let clock = Clock::get()?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤—Ç–æ–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –∫—É–ø–ª–µ–Ω—ã
    require!(
        !player.auto_claim_purchased,
        SolanaMafiaError::AutoClaimAlreadyPurchased
    );
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º 0.05 SOL —Å –∏–≥—Ä–æ–∫–∞ –≤ treasury PDA
    let auto_claim_cost = AUTO_CLAIM_COST;
    
    // Transfer from player to treasury PDA
    let transfer_instruction = system_program::Transfer {
        from: ctx.accounts.player_owner.to_account_info(),
        to: ctx.accounts.treasury_pda.to_account_info(),
    };
    
    let cpi_context = CpiContext::new(
        ctx.accounts.system_program.to_account_info(),
        transfer_instruction,
    );
    
    system_program::transfer(cpi_context, auto_claim_cost)?;
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
    player.purchase_auto_claim()?;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É treasury
    game_state.add_investment(auto_claim_cost);
    
    // –≠–º–∏—Ç–∏–º event –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    emit!(crate::AutoClaimPurchased {
        player: player.owner,
        cost: auto_claim_cost,
        purchased_at: clock.unix_timestamp,
    });
    
    msg!("üöÄ Auto claim purchased for {} lamports by player {}", 
         auto_claim_cost, player.owner);
    
    Ok(())
}

/// üÜï –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
pub fn get_global_stats(ctx: Context<crate::GetGlobalStats>) -> Result<()> {
    let game_state = &ctx.accounts.game_state;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    msg!("GLOBAL_STATS: players={}, invested={}, withdrawn={}, businesses={}, treasury={}", 
         game_state.total_players,
         game_state.total_invested,
         game_state.total_withdrawn,
         game_state.total_businesses,
         game_state.total_treasury_collected
    );
    
    Ok(())
}