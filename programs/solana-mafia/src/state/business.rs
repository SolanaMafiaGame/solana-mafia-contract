// state/business.rs - –û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –°–ò–°–¢–ï–ú–´ –£–õ–£–ß–®–ï–ù–ò–ô
use anchor_lang::prelude::*;
use crate::constants::*;

#[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
pub enum BusinessType {
    TobaccoShop = 0,       // 0.1 SOL –±–∞–∑–æ–≤–∞—è
    FuneralService = 1,    // 0.5 SOL –±–∞–∑–æ–≤–∞—è
    CarWorkshop = 2,       // 2 SOL –±–∞–∑–æ–≤–∞—è
    ItalianRestaurant = 3, // 0.1 SOL (–º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π —Å–ª–æ—Ç)
    GentlemenClub = 4,     // 0.5 SOL
    CharityFund = 5,       // 2 SOL
}

impl BusinessType {
    pub fn to_index(&self) -> usize {
        match self {
            BusinessType::TobaccoShop => 0,
            BusinessType::FuneralService => 1,
            BusinessType::CarWorkshop => 2,
            BusinessType::ItalianRestaurant => 3,
            BusinessType::GentlemenClub => 4,
            BusinessType::CharityFund => 5,
        }
    }

    pub fn from_index(index: u8) -> Option<Self> {
        match index {
            0 => Some(BusinessType::TobaccoShop),
            1 => Some(BusinessType::FuneralService),
            2 => Some(BusinessType::CarWorkshop),
            3 => Some(BusinessType::ItalianRestaurant),
            4 => Some(BusinessType::GentlemenClub),
            5 => Some(BusinessType::CharityFund),
            _ => None,
        }
    }

    /// üÜï –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞
    pub fn get_base_cost(&self) -> u64 {
        MIN_DEPOSITS[self.to_index()]
    }

    /// üÜï –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    pub fn get_base_rate(&self) -> u16 {
        BUSINESS_RATES[self.to_index()]
    }


    // –£–±—Ä–∞–Ω–æ get_upgrade_name - –±—ã–ª–æ –¥–ª—è NFT –º–µ—Ç–∞–¥–∞—Ç—ã
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
pub struct Business {
    pub business_type: BusinessType,
    pub base_invested_amount: u64,       // üÜï –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π)
    pub total_invested_amount: u64,      // üÜï –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–∞–∑–∞ + –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è)
    pub daily_rate: u16,                 // –¢–µ–∫—É—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–±–∞–∑–∞ + –±–æ–Ω—É—Å—ã —É–ª—É—á—à–µ–Ω–∏–π)
    pub upgrade_level: u8,               // üÜï –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è (0-3)
    pub upgrade_history: [u64; 3],       // üÜï –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
    pub total_earned: u64,
    pub last_claim: i64,                 // DEPRECATED - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    pub created_at: i64,
    pub is_active: bool,
    
    // üÜï –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• CLAIM
    pub purchased_at: u32,               // –í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞ (u32 timestamp)
    pub last_claim_at: Option<u32>,      // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ claim –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
}

impl Business {
    pub const SIZE: usize = 
        1 +  // business_type
        8 +  // base_invested_amount
        8 +  // total_invested_amount
        2 +  // daily_rate
        1 +  // upgrade_level
        24 + // upgrade_history [u64; 3]
        8 +  // total_earned
        8 +  // last_claim (DEPRECATED)
        8 +  // created_at
        1 +  // is_active
        4 +  // purchased_at (u32)
        5;   // last_claim_at (Option<u32>)

    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –±–∏–∑–Ω–µ—Å
    pub fn new(
        business_type: BusinessType,
        base_amount: u64,
        current_time: i64,
    ) -> Self {
        let base_rate = business_type.get_base_rate();
        let current_time_u32 = Self::timestamp_to_u32(current_time);
        
        Self {
            business_type,
            base_invested_amount: base_amount,
            total_invested_amount: base_amount, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–∞ –±–∞–∑–æ–≤–æ–π
            daily_rate: base_rate,
            upgrade_level: 0,
            upgrade_history: [0; 3],
            total_earned: 0,
            last_claim: 0, // DEPRECATED - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –Ω—É–∂–Ω–æ –¥–ª—è SIZE
            created_at: current_time,
            is_active: true,
            
            // üÜï –ù–û–í–´–ï –ü–û–õ–Ø
            purchased_at: current_time_u32,
            last_claim_at: None, // –ü–æ–∫–∞ –Ω–µ –±—ã–ª–æ claim
        }
    }

    /// üÜï –°–æ–∑–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å
    pub fn create_upgraded(
        business_type: BusinessType,
        base_amount: u64,
        target_level: u8,
        upgrade_costs: [u64; 3],
        current_time: i64,
    ) -> Result<Self> {
        if target_level > MAX_UPGRADE_LEVEL {
            return Err(ProgramError::InvalidArgument.into());
        }

        let mut business = Self::new(business_type, base_amount, current_time);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        for level in 1..=target_level {
            let upgrade_cost = upgrade_costs[(level - 1) as usize];
            business.apply_upgrade(level, upgrade_cost)?;
        }
        
        // –ù–æ–≤—ã–µ –ø–æ–ª—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ new()
        Ok(business)
    }

    /// üÜï –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
    pub fn apply_upgrade(&mut self, new_level: u8, upgrade_cost: u64) -> Result<()> {
        if new_level != self.upgrade_level + 1 || new_level > MAX_UPGRADE_LEVEL {
            return Err(ProgramError::InvalidArgument.into());
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
        self.upgrade_history[(new_level - 1) as usize] = upgrade_cost;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
        self.total_invested_amount = self.total_invested_amount
            .checked_add(upgrade_cost)
            .ok_or(ProgramError::ArithmeticOverflow)?;
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: daily_rate –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –∞–ø–≥—Ä–µ–π–¥–∞!
        // –£—Ä–æ–≤–Ω–∏ –∞–ø–≥—Ä–µ–π–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ invested_amount, –Ω–æ –ù–ï –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É
        // daily_rate –æ—Å—Ç–∞–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–º –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
        let base_rate = self.business_type.get_base_rate();
        self.daily_rate = base_rate;  // –í—Å–µ–≥–¥–∞ –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞, –±–µ–∑ –±–æ–Ω—É—Å–æ–≤
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        self.upgrade_level = new_level;
        
        Ok(())
    }

    /// üÜï –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
    pub fn calculate_next_upgrade_cost(&self) -> Option<u64> {
        let next_level = self.upgrade_level + 1;
        if next_level > MAX_UPGRADE_LEVEL {
            return None;
        }

        let multiplier = UPGRADE_COST_MULTIPLIERS[(next_level - 1) as usize];
        Some(self.base_invested_amount * multiplier as u64 / 100)
    }

    /// üÜï –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
    pub fn can_upgrade(&self) -> bool {
        self.upgrade_level < MAX_UPGRADE_LEVEL && self.is_active
    }

    /// üÜï –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
    pub fn get_total_investment_for_refund(&self) -> u64 {
        self.total_invested_amount // –ë–∞–∑–∞ + –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    pub fn get_upgrade_cost(&self, target_level: u8) -> Result<u64> {
        if target_level <= self.upgrade_level || target_level > MAX_UPGRADE_LEVEL {
            return Err(ProgramError::InvalidArgument.into());
        }

        let multiplier = UPGRADE_COST_MULTIPLIERS[(target_level - 1) as usize];
        let upgrade_cost = self.base_invested_amount
            .checked_mul(multiplier as u64)
            .and_then(|x| x.checked_div(100))
            .ok_or(ProgramError::ArithmeticOverflow)?;
        
        Ok(upgrade_cost)
    }

    /// –£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    pub fn upgrade_to_level(&mut self, target_level: u8, upgrade_cost: u64) -> Result<()> {
        if target_level != self.upgrade_level + 1 || target_level > MAX_UPGRADE_LEVEL {
            return Err(ProgramError::InvalidArgument.into());
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        let expected_cost = self.get_upgrade_cost(target_level)?;
        if upgrade_cost != expected_cost {
            return Err(ProgramError::InvalidArgument.into());
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        self.apply_upgrade(target_level, upgrade_cost)
    }


    /// Calculate daily earnings with current rate
    pub fn calculate_daily_earnings(&self) -> u64 {
        let base_earnings = (self.total_invested_amount as u128)
            .checked_mul(self.daily_rate as u128)
            .and_then(|x| x.checked_div(10_000))
            .unwrap_or(0) as u64;
            
        base_earnings
    }

    // ‚ùå –£–î–ê–õ–ï–ù–û: calculate_pending_earnings - –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ calculate_claimable_earnings
    // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ claim –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞

    // ‚ùå –£–î–ê–õ–ï–ù–û: update_last_claim - –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ update_claim_time –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ

    /// Add to total earned
    pub fn add_to_total_earned(&mut self, amount: u64) -> Result<()> {
        self.total_earned = self.total_earned
            .checked_add(amount)
            .ok_or(ProgramError::ArithmeticOverflow)?;
        Ok(())
    }

    /// Calculate days since creation
    pub fn days_since_created(&self, current_time: i64) -> u64 {
        if current_time <= self.created_at {
            return 0;
        }
        
        let seconds_diff = (current_time - self.created_at) as u64;
        seconds_diff / 86_400
    }

    /// Calculate earnings for specific period
    pub fn calculate_earnings_for_period(&self, seconds: i64) -> u64 {
        if !self.is_active || seconds <= 0 {
            return 0;
        }
        
        let daily_earnings = self.calculate_daily_earnings();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –º–∞–ª—ã—Ö —á–∏—Å–ª–∞—Ö
        let total_earnings = (daily_earnings as u128)
            .checked_mul(seconds as u128)
            .and_then(|x| x.checked_div(86_400))
            .unwrap_or(0);
            
        total_earnings.min(u64::MAX as u128) as u64
    }

    /// üÜï Health check (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
    pub fn health_check(&self, current_time: i64) -> Result<()> {
        if self.created_at > current_time {
            return Err(ProgramError::InvalidArgument.into());
        }
        
        // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        if Self::u32_to_timestamp(self.purchased_at) > current_time {
            return Err(ProgramError::InvalidArgument.into());
        }
        
        if let Some(last_claim_time) = self.last_claim_at {
            if Self::u32_to_timestamp(last_claim_time) > current_time {
                return Err(ProgramError::InvalidArgument.into());
            }
            if Self::u32_to_timestamp(last_claim_time) < Self::u32_to_timestamp(self.purchased_at) {
                return Err(ProgramError::InvalidArgument.into());
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 100% –≤ –¥–µ–Ω—å = 10000 bp)
        if self.daily_rate > 10000 {
            return Err(ProgramError::InvalidArgument.into());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è
        if self.upgrade_level > MAX_UPGRADE_LEVEL {
            return Err(ProgramError::InvalidArgument.into());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ total >= base
        if self.total_invested_amount < self.base_invested_amount {
            return Err(ProgramError::InvalidArgument.into());
        }
        
        Ok(())
    }

    /// üÜï –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è i64 timestamp –≤ u32 (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ 2106 –≥–æ–¥–∞)
    pub fn timestamp_to_u32(timestamp: i64) -> u32 {
        (timestamp as u32).max(1) // –ú–∏–Ω–∏–º—É–º 1, —á—Ç–æ–±—ã 0 –æ–∑–Ω–∞—á–∞–ª "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    }

    /// üÜï –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è u32 –æ–±—Ä–∞—Ç–Ω–æ –≤ i64
    pub fn u32_to_timestamp(compact_time: u32) -> i64 {
        if compact_time == 0 {
            0
        } else {
            compact_time as i64
        }
    }

    /// üÜï –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ earnings
    pub fn get_earnings_start_time(&self) -> u32 {
        match self.last_claim_at {
            Some(last_claim) => last_claim.max(self.purchased_at),
            None => self.purchased_at
        }
    }

    /// üÜï –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ claim
    pub fn update_claim_time(&mut self, current_time: i64) {
        self.last_claim_at = Some(Self::timestamp_to_u32(current_time));
    }

    /// üÜï –†–∞—Å—Å—á–∏—Ç–∞—Ç—å earnings —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ claim –∏–ª–∏ –ø–æ–∫—É–ø–∫–∏ (–¥–ª—è auto-claim)
    pub fn calculate_claimable_earnings(&self, current_time: i64) -> u64 {
        let earnings_start = Self::u32_to_timestamp(self.get_earnings_start_time());
        let active_seconds = current_time - earnings_start;
        
        if active_seconds <= 0 {
            return 0;
        }
        
        self.calculate_earnings_for_period(active_seconds)
    }

    /// üÜï –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—É—Ç–æ—á–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ auto-claim)
    pub fn calculate_full_daily_earnings_if_active(&self) -> u64 {
        if !self.is_active {
            return 0;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é —Å—É—Ç–æ—á–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        self.calculate_daily_earnings()
    }
}